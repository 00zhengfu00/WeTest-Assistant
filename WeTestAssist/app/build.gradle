apply plugin: 'com.android.application'

android {
    compileSdkVersion 22
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.tencent.wefpmonitor"
        minSdkVersion 9
        targetSdkVersion 22
        versionCode 1
        versionName "1.0.1"

        ndk {
            moduleName "WetestForAndroid" // <-- This is the name of my C++ module!
        }

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets.main.jni.srcDirs = []
    // disable automatic ndk-build call, which ignore our Android.mk
    sourceSets.main.jniLibs.srcDir 'src/main/libs'

    task ndkBuild(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd()
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn ndkBuild

    }

    task cleanNative(type: Exec) {
        workingDir file('src/main')
        commandLine getNdkBuildCmd(), 'clean'
    }

    clean.dependsOn cleanNative
    sourceSets { main { res.srcDirs = ['src/main/res', 'src/main/res/color'] } }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:appcompat-v7:22.2.1'
    compile 'com.android.support:design:22.2.1'
    compile 'com.android.support:support-v4:22.2.1'
    compile 'com.android.support:recyclerview-v7:22.2.1'
    compile 'com.android.support:cardview-v7:22.2.1'
    compile 'com.google.android.gms:play-services:7.3.0'
    compile files('libs/RootTools-3.4.jar')
    compile files('libs/jg_filter_sdk_1.0.jar')
    compile 'com.github.wangjiegulu:RapidFloatingActionButton:1.0.3'
    compile 'com.github.wangjiegulu:AndroidBucket:1.0.4'
    compile 'com.github.wangjiegulu:AndroidInject:1.0.6'
    compile 'com.nineoldandroids:library:2.4.0'
    compile files('libs/Acadiatech_JSON.jar')
    compile files('libs/gson-2.3.1.jar')
}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

def getNdkBuildCmd() {
    def ndkbuild = getNdkDir() + "/ndk-build"
    ndkbuild += ".cmd"

    return ndkbuild
}


android {

    compileOptions {
        encoding "utf-8"
    }

}